openapi: 3.0.3
info:
  title: Soft Reto Técnico – MVP API
  description: |
    API for the technical challenge MVP: authentication (JWT), fusion data (SWAPI + RestCountries) with caching,
    pagination, and custom endpoint, in this case will be an API to store GTA V profiles.
  version: 1.0.0
  contact:
    name: Juan Diego Carranza Vega
    email: jcarranzav98@gmail.com

servers:
  - url: https://{apiId}.execute-api.us-east-1.amazonaws.com/dev
    description: AWS API Gateway (dev)
    variables:
      apiId:
        default: sgvkw9cheh


security:
  - BearerAuth: [ ]

tags:
  - name: Health
    description: System health check
  - name: Auth
    description: Authentication endpoints (email/password)
  - name: Fusion
    description: Fusion endpoints that combine SWAPI and RestCountries data and persist history
  - name: Profiles
    description: Protected endpoints to create GTA V profiles

paths:
  /health:
    get:
      tags: [ Health ]
      summary: Health check
      description: Check if the service is operational.
      responses:
        '200':
          description: Service is up and running
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
              examples:
                InternalError:
                  value:
                    message: 'Internal Server Error: An internal server error occurred.'
                    error: INTERNAL_SERVER_ERROR
                    path: /health
                    timestamp: '2025-08-11T16:33:20.001Z'

  /auth/signup:
    post:
      tags: [ Auth ]
      summary: Sign up a user
      description: Creates a new user and returns a JWT access token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthDto'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignupResponse'
        '409':
          description: Email already registered
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
              examples:
                EmailInUse:
                  value:
                    message: 'Conflict: The request conflicts with the current state of the resource.'
                    error: Email already registered
                    path: /auth/signup
                    timestamp: '2025-08-11T16:00:00.000Z'
        '400':
          description: Validation error (invalid email or weak password)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
              examples:
                BadPayload:
                  value:
                    message: 'Bad Request: The server could not interpret the request.'
                    error: Bad Request
                    path: /auth/signup
                    timestamp: '2025-08-11T16:00:00.000Z'
        '500':
          description: Internal server error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
              examples:
                InternalError:
                  value:
                    message: 'Internal Server Error: An internal server error occurred.'
                    error: INTERNAL_SERVER_ERROR
                    path: /auth/signup
                    timestamp: '2025-08-11T16:33:20.001Z'

  /auth/login:
    post:
      tags: [ Auth ]
      summary: Login a user
      description: Validates credentials and returns a JWT access token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthDto'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials (email not found or password mismatch)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
              examples:
                InvalidCredentials:
                  value:
                    message: 'Unauthorized: You do not have permission to access this resource.'
                    error: Invalid credentials
                    path: /auth/login
                    timestamp: '2025-08-11T16:00:00.000Z'
        '400':
          description: Validation error (invalid payload)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
              examples:
                BadPayload:
                  value:
                    message: 'Bad Request: The server could not interpret the request.'
                    error: INTERNAL_SERVER_ERROR
                    path: /auth/login
                    timestamp: '2025-08-11T16:00:00.000Z'
        '500':
          description: Internal server error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
              examples:
                InternalError:
                  value:
                    message: 'Internal Server Error: An internal server error occurred.'
                    error: INTERNAL_SERVER_ERROR
                    path: /auth/login
                    timestamp: '2025-08-11T16:33:20.001Z'

  /fusionados:
    get:
      tags: [ Fusion ]
      summary: Get fusion by SWAPI person ID
      description: |
        Queries SWAPI (person + planet) and RestCountries, fuses data, persists it in MySQL,
        and caches in DynamoDB for 30 minutes.
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: people
          required: true
          description: SWAPI person ID (e.g., "18")
          schema:
            type: string
            example: "18"
      responses:
        '200':
          description: Fusion retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FusionGetResponse'
        '409':
          description: No country associated with the planet name
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
              examples:
                PlanetWithoutCountry:
                  value:
                    message: 'Conflict: The request conflicts with the current state of the resource.'
                    error: No country associated with the planet "Tatooine" was found.
                    path: /fusionados
                    timestamp: '2025-08-11T16:00:00.000Z'
        '400':
          description: Validation error (missing or invalid query param)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
              examples:
                BadQuery:
                  value:
                    message: 'Bad Request: The server could not interpret the request.'
                    error: Bad Request
                    path: /fusionados
                    timestamp: '2025-08-11T16:00:00.000Z'
        '401':
          description: Missing or invalid JWT access token
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
              examples:
                MissingToken:
                  value:
                    message: 'Unauthorized: You do not have permission to access this resource.'
                    error: Invalid access token
                    path: /fusionados
                    timestamp: '2025-08-11T16:00:00.000Z'
        '500':
          description: Internal server error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
              examples:
                InternalError:
                  value:
                    message: 'Internal Server Error: An internal server error occurred.'
                    error: INTERNAL_SERVER_ERROR
                    path: /fusionados
                    timestamp: '2025-08-11T16:33:20.001Z'

  /historial:
    get:
      tags: [ Fusion ]
      summary: Fusion history (paginated, chronological)
      description: Returns a chronologically ordered, paginated list of fusion records persisted by `/fusionados`.
      security:
        - BearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: List retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HistoryListResponse'
        '400':
          description: Validation error (invalid pagination params)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
              examples:
                BadPagination:
                  value:
                    message: 'Bad Request: The server could not interpret the request.'
                    error: Bad Request
                    path: /historial
                    timestamp: '2025-08-11T16:00:00.000Z'
        '401':
          description: Missing or invalid JWT access token
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
              examples:
                MissingToken:
                  value:
                    message: 'Unauthorized: You do not have permission to access this resource.'
                    error: Invalid access token
                    path: /historial
                    timestamp: '2025-08-11T16:00:00.000Z'
        '500':
          description: Internal server error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
              examples:
                InternalError:
                  value:
                    message: 'Internal Server Error: An internal server error occurred.'
                    error: INTERNAL_SERVER_ERROR
                    path: /historial
                    timestamp: '2025-08-11T16:33:20.001Z'

  /almacenar:
    post:
      tags: [ Profiles ]
      summary: Create GTA V profile
      description: |
        Creates and persists a GTA V profile in MySQL.  
        **Protected:** requires a valid JWT access token in the Authorization header.
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateGTA5ProfileDto' }
      responses:
        '201':
          description: Profile created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GTA5ProfileCreateResponse'
        '401':
          description: Missing or invalid JWT access token
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
              examples:
                MissingToken:
                  value:
                    message: 'Unauthorized: You do not have permission to access this resource.'
                    error: Invalid access token
                    path: /almacenar
                    timestamp: '2025-08-11T16:00:00.000Z'
        '400':
          description: Validation error (invalid body)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
              examples:
                BadBody:
                  value:
                    message: 'Bad Request: The server could not interpret the request.'
                    error: Bad Request
                    path: /almacenar
                    timestamp: '2025-08-11T16:00:00.000Z'
        '409':
          description: Conflict (e.g., profile_name already exists)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
              examples:
                DuplicateProfileName:
                  value:
                    message: 'Conflict: The request conflicts with the current state of the resource.'
                    error: Profile name already exists
                    path: /almacenar
                    timestamp: '2025-08-11T16:00:00.000Z'
        '500':
          description: Internal server error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
              examples:
                InternalError:
                  value:
                    message: 'Internal Server Error: An internal server error occurred.'
                    error: INTERNAL_SERVER_ERROR
                    path: /almacenar
                    timestamp: '2025-08-11T16:33:20.001Z'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT authentication via Authorization header:
        `Authorization: Bearer <token>`

  parameters:
    PageParam:
      name: page
      in: query
      description: Page number (minimum 1)
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
    LimitParam:
      name: limit
      in: query
      description: Number of items per page (1–100)
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 10

  schemas:
    # ---------- Generic Wrappers ----------
    ResponseDto:
      description: Generic response wrapper with a message and optional data
      type: object
      properties:
        message:
          type: string
          example: Successful response
        data:
          type: object
          nullable: true

    PaginationDto:
      description: DTO containing pagination metadata for list responses
      type: object
      properties:
        totalRecords:
          type: integer
          description: Total number of records available
          example: 42
        currentPage:
          type: integer
          description: Current page number
          example: 1
        totalPages:
          type: integer
          description: Total number of pages
          example: 5
        nextPage:
          type: integer
          nullable: true
          description: Page number of the next page (null if none)
          example: 2
        prevPage:
          type: integer
          nullable: true
          description: Page number of the previous page (null if none)
          example: null
      required:
        - totalRecords
        - currentPage
        - totalPages
        - nextPage
        - prevPage

    PaginationResponseDto:
      description: Generic paginated response wrapper extending ResponseDto
      allOf:
        - $ref: '#/components/schemas/ResponseDto'
      properties:
        pagination:
          $ref: '#/components/schemas/PaginationDto'

    ResponseListDto:
      description: Generic response wrapper for lists, including data array and pagination metadata
      allOf:
        - $ref: '#/components/schemas/PaginationResponseDto'
      properties:
        data:
          type: array
          description: Array of returned items
          items:
            type: object

    ErrorResponse:
      description: Standard error response format for failed requests
      type: object
      properties:
        message:
          type: string
          example: 'Internal Server Error: An internal server error occurred.'
        error:
          type: string
          example: INTERNAL_SERVER_ERROR
        path:
          type: string
          example: /some/path
        timestamp:
          type: string
          example: '2025-08-11T16:33:20.001Z'

    HealthResponse:
      description: Response schema for health check endpoint
      type: object
      properties:
        message:
          type: string
          example: Ok

    # ---------- Auth ----------
    AuthDto:
      description: Credentials DTO
      type: object
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          minLength: 6
          description: Must contain letters and numbers.
          example: MySecret123
      required: [ email, password ]

    AccessTokenResponse:
      description: JWT access token response
      type: object
      properties:
        accessToken:
          type: string
          description: "Use as `Authorization: Bearer <token>"
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        accessExpiresAt:
          type: string
          format: date-time
          nullable: true
          description: Token expiration timestamp (ISO8601) if provided.
          example: '2025-08-11T18:45:00.000Z'
      required: [ accessToken ]

    # Wrapper success responses (for full $ref in paths)
    SignupResponse:
      allOf:
        - $ref: '#/components/schemas/ResponseDto'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/AccessTokenResponse'

    LoginResponse:
      allOf:
        - $ref: '#/components/schemas/ResponseDto'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/AccessTokenResponse'

    FusionGetResponse:
      allOf:
        - $ref: '#/components/schemas/ResponseDto'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/FusionLog'

    HistoryListResponse:
      allOf:
        - $ref: '#/components/schemas/ResponseListDto'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/FusionLog'

    GTA5ProfileCreateResponse:
      allOf:
        - $ref: '#/components/schemas/ResponseDto'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/GTA5Profile'

    # ---------- Fusion domain ----------
    SwPerson:
      type: object
      properties:
        name: { type: string, example: Wedge Antilles }
        homeworld: { type: string, example: "https://swapi.dev/api/planets/1/" }
        url: { type: string, example: "https://swapi.dev/api/people/18/" }
        height: { type: string }
        mass: { type: string }
        hair_color: { type: string }
        skin_color: { type: string }
        eye_color: { type: string }
        birth_year: { type: string }
        gender: { type: string }
        films: { type: array, items: { type: string } }
        species: { type: array, items: { type: string } }
        vehicles: { type: array, items: { type: string } }
        starships: { type: array, items: { type: string } }
        created: { type: string }
        edited: { type: string }
      required: [ name, homeworld, url ]

    SwPlanet:
      type: object
      properties:
        name: { type: string, example: Tatooine }
        climate: { type: string, example: arid }
        rotation_period: { type: string }
        orbital_period: { type: string }
        diameter: { type: string }
        gravity: { type: string }
        terrain: { type: string }
        surface_water: { type: string }
        population: { type: string }
        residents: { type: array, items: { type: string } }
        films: { type: array, items: { type: string } }
        created: { type: string }
        edited: { type: string }
        url: { type: string }

    RestCountry:
      type: object
      properties:
        name:
          type: object
          properties:
            common: { type: string, example: Peru }
            official: { type: string, example: Republic of Peru }
        population: { type: integer, example: 33000000 }
        region: { type: string, example: Americas }
        subregion: { type: string, example: South America }
        cca3: { type: string, example: PER }
        flags:
          type: object
          properties:
            png: { type: string, example: "https://flagcdn.com/w320/pe.png" }
            svg: { type: string, example: "https://flagcdn.com/pe.svg" }
            alt: { type: string, example: Flag of Peru }
        languages:
          type: object
          additionalProperties: { type: string }

    FusionLog:
      type: object
      description: Fused response persisted to storage.
      properties:
        id: { type: string, example: "018f64d2-7b5d-7b0a-bf0b-b1b2a3c4d5e6" }
        person_id: { type: string, example: "18" }
        person: { $ref: '#/components/schemas/SwPerson' }
        planet: { $ref: '#/components/schemas/SwPlanet' }
        country: { $ref: '#/components/schemas/RestCountry' }
        status: { type: boolean, example: true }
        created_by: { type: string, nullable: true }
        updated_by: { type: string, nullable: true }
        created_at: { type: string, format: date-time, example: "2025-08-11T16:30:00.000Z" }
        updated_at: { type: string, format: date-time, example: "2025-08-11T16:30:00.000Z" }
      required: [ id, person_id, person, planet, country, status, created_at, updated_at ]

    # ---------- GTA V Profiles ----------
    PlatformEnum:
      type: string
      enum: [ PC, PS4, PS5, XboxOne, XboxSeries ]
    ModeEnum:
      type: string
      enum: [ STORY, ONLINE ]
    CharacterEnum:
      type: string
      enum: [ MICHAEL, FRANKLIN, TREVOR ]
    OnlineRoleEnum:
      type: string
      enum: [ CEO, MC_PRESIDENT, VIP, SECURITY ]
    ActivityEnum:
      type: string
      enum: [ HEISTS, RACES, FREEMODE, SURVIVAL, MISSIONS, ARENA ]
    ControlSchemeEnum:
      type: string
      enum: [ KEYBOARD_MOUSE, CONTROLLER ]
    CameraModeEnum:
      type: string
      enum: [ FIRST_PERSON, THIRD_PERSON ]

    CreateGTA5ProfileDto:
      type: object
      description: "DTO to create a GTA V profile. Required: profile_name, platforms, modes_enabled."
      properties:
        profile_name:
          type: string
          description: Unique profile name (lowercase; letters, numbers, underscore).
          example: juan_gamer
          pattern: "^[a-z0-9_]+$"
        platforms:
          type: array
          items: { $ref: '#/components/schemas/PlatformEnum' }
          minItems: 1
          example: [ "PC","PS5" ]
        modes_enabled:
          type: array
          items: { $ref: '#/components/schemas/ModeEnum' }
          minItems: 1
          example: [ "STORY","ONLINE" ]
        is_voice_chat_enabled:
          type: boolean
          default: false
          example: true
        control_scheme:
          $ref: '#/components/schemas/ControlSchemeEnum'
        camera_preference:
          $ref: '#/components/schemas/CameraModeEnum'
        hours_played:
          type: number
          format: double
          default: 0
          example: 245.7
        completion_percent:
          type: integer
          minimum: 0
          maximum: 100
          default: 0
          example: 86
        rank_online:
          type: integer
          default: 0
          example: 125
        kd_ratio:
          type: number
          format: double
          default: 0
          example: 1.83
        mission_ids_completed:
          type: array
          items: { type: integer }
          default: [ ]
          example: [ 1,2,3,5,8,13 ]
        owned_vehicle_names:
          type: array
          items: { type: string }
          default: [ ]
          example: [ "Kuruma (Armored)","Oppressor Mk II","Deluxo" ]
        favorite_weapons:
          type: array
          items: { type: string }
          default: [ ]
          example: [ "AP Pistol","Heavy Sniper","RPG" ]
        characters_unlocked:
          type: array
          items: { $ref: '#/components/schemas/CharacterEnum' }
          default: [ ]
          example: [ "MICHAEL","FRANKLIN","TREVOR" ]
        primary_character:
          $ref: '#/components/schemas/CharacterEnum'
        online_roles:
          type: array
          items: { $ref: '#/components/schemas/OnlineRoleEnum' }
          default: [ ]
        preferred_activities:
          type: array
          items: { $ref: '#/components/schemas/ActivityEnum' }
          default: [ ]
      required: [ profile_name, platforms, modes_enabled ]

    GTA5Profile:
      allOf:
        - $ref: '#/components/schemas/CreateGTA5ProfileDto'
        - type: object
          properties:
            id: { type: string, example: "018f64d2-aaaa-bbbb-cccc-ddddeeeeffff" }
            status: { type: boolean, example: true }
            created_by: { type: string, example: system }
            updated_by: { type: string, example: system }
            created_at: { type: string, format: date-time, example: "2025-08-11T16:30:00.000Z" }
            updated_at: { type: string, format: date-time, example: "2025-08-11T16:30:00.000Z" }
